service: users-manager-api
	
frameworkVersion: "3.10.2"

plugins:
  - serverless-domain-manager # Defines Route53 Domain
  - serverless-deployment-bucket # Defines name and configuration for the deployment bucket
  - serverless-python-requirements # Installs Python requirements
  - serverless-iam-roles-per-function # Allows IAM roles per function
  - serverless-prune-plugin # Deletes older versions

provider:
  name: aws
  runtime: python3.9
  region: eu-west-3
  apiNapme: ${self:service}
  apiGateway:
    apiKeys:
      - ${opt:stage}-${self:service}-key
    apiKeySourceType: HEADER
  # iamRoleStatements:
  #   - Effect: Allow
  #     Action:
  #     Resource:
  deploymentBucket:
    name: "${self:service}-${opt:stage}-bucket"
    serverSideEncryption: AES256
  tracing:
    apiGateway: true
    lambda: true

package:
  individually: true
  exclude:
    - "**"
 
custom:
  deploymentBucket:
    blockPublicAccess: true
    tags:
      - Key: Managed by
        Value: Serverless
      - Key: Environment
        Value: ${opt:stage}
  apiKeyOnlyAccess:
    development: true
    production: true
  domainNames: ${file(../serverless_settings/domainNames.yml)}
  certificateNames: ${file(../serverless_settings/certificateNames.yml)}
  customDomain:
    domainName: ${self:custom.domainNames.${opt:stage}}
    certificateName: ${self:custom.certificateNames.${opt:stage}}
    basePath: "users"
    stage: ${opt:stage}
    createRoute53Record: true
    endpointType: "regional"
    autoDomain: true
  prune:
    automatic: true
    number: 2


functions:
  createUser:
    name: ${self:service}-${opt:stage}-create-user
    description: Responsible for creating new users
    runtime: python3.9
    timeout: 10
    package:
      include:
        - ../common/exceptions.py
        - ../common/api.py
        - ../common/enums.py
        - ../common/transformers/**.py
        - ../common/utilities.py
        - users_table.py
        - create_user.py
    handler: create_user.handler
    #iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          # - dynamodb:Query
          # - dynamodb:Scan
          # - dynamodb:GetItem
          - dynamodb:PutItem
        Resource:
          Fn::GetAtt:
            - usersTable
            - Arn
    environment:
      USERS_TABLE_NAME:
        Ref: usersTable
    events:
      - http:
          path: /
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          private: ${self:custom.apiKeyOnlyAccess.${opt:stage}}

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "Users"
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: Id
            AttributeType: S
        KeySchema:
          - AttributeName: Id
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: ExpiresOn
          Enabled: true
  # Outputs:
    # CreateUserLambdaArn:
    #   Description: "${self:service} lambda Arn"
    #   Value:
    #     Fn::GetAtt: ServiceLambdaFunction.Arn
    #   Export:
    #     Name: MyServiceARN


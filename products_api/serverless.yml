service: ProductsAPI
	
frameworkVersion: "3.19.0" # Lock Serverless version

plugins:
  - serverless-deployment-bucket # Defines name and configuration for the deployment bucket
  - serverless-certificate-creator # Creates certificate, if needed
  - serverless-domain-manager # Defines Route53 Domain
  # - serverless-python-requirements # Installs Python requirements
  - serverless-iam-roles-per-function # Allows IAM roles per function
  - serverless-prune-plugin # Deletes older versions

provider:
  name: aws
  runtime: python3.9
  stage: ${env:ENVIRONMENT}
  region: eu-west-3 #${opt:region, "eu-west-3"}

  # Bucket that will store the zipped API
  deploymentBucket:
    name: ${self:custom.bucket.bucketName}
  
  # APi Gateway configuration
  apiGateway:
    #shouldStartNameWithService: true
    apiKeys:
      - ${self:provider.stage}-${self:service}-key
    apiKeySourceType: HEADER

  tracing:
    apiGateway: true
    lambda: true
 
custom:
  # Common configuration
  bucket: ${file(../serverless_settings/buckets.yml):${self:provider.stage}}
  domain: ${file(../serverless_settings/domains.yml):${self:provider.stage}}
  prune: ${file(../serverless_settings/prune.yml):${self:provider.stage}}

  # S3
  deploymentBucket: ${self:custom.bucket.bucketConfiguration}

  # Amazon Certificate Manager
  customCertificate:
    hostedZoneNames: ${self:custom.domain.certificate.hostedZoneNames} # don't forget the dot on the end - is required by Route53
    certificateName: ${self:custom.domain.certificate.certificateName}
    region: ${self:provider.region}

  # Route53
  customDomain:
    domainName: ${self:custom.domain.domainName}
    certificateName: ${self:custom.domain.certificate.certificateName}
    createRoute53Record: true # Enable plugin to create an A Alias and AAAA Alias records in Route53
    autoDomain: false # Enable plugin to autorun create_domain/delete_domain as part of sls deploy/remove
    basePath: "products" # API base path
    endpointType: "regional"

  # Require or not API keys when accessing endpoints
  apiKeyOnlyAccess:
    development: true
    production: true


package:
  individually: true
  exclude:
    - "**"

functions:
  createProduct:
    name: ${self:provider.stage}-${self:service}-CreateProduct
    description: Responsible for creating new products
    runtime: python3.9
    timeout: 10
    package:
      include:
        - ../common/exceptions.py
        - ../common/api.py
        - ../common/utilities.py
        - ../common/decorators.py
        - ../common/enums.py
        - ../common/aws/dynamo.py
        - ../common/models/product.py
        - ../common/transform.py
        - products_table.py
        - create_products.py
    handler: create_products.handler
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          # - dynamodb:Query
          # - dynamodb:Scan
          # - dynamodb:GetItem
          - dynamodb:PutItem
        Resource:
          Fn::GetAtt:
            - ProductsTable
            - Arn
    environment:
      PRODUCTS_TABLE_NAME:
        Ref: ProductsTable
    events:
      - http:
          path: /create-product
          method: post
          private: ${self:custom.apiKeyOnlyAccess.${self:provider.stage}}
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          request:
            schemas:
              application/json:
                schema: ${file(schemas/create_products_schema.json)}
                name: PostCreateProduct
                description: Validation model for Creating Products


resources:
  Resources:
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Products
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: Id
            AttributeType: S
        KeySchema:
          - AttributeName: Id
            KeyType: HASH

  # Outputs:
    # CreateUserLambdaArn:
    #   Description: "${self:service} lambda Arn"
    #   Value:
    #     Fn::GetAtt: ServiceLambdaFunction.Arn
    #   Export:
    #     Name: MyServiceARN


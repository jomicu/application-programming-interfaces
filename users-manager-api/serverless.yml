service: users-manager-api

plugins:
  - serverless-domain-manager
  - serverless-python-requirements
  - serverless-iam-roles-per-function
  - serverless-resource-policy
  - serverless-prune-plugin

provider:
  name: aws
  stackTags: ${file(../serverless-settings/tags.yml):StackTags}
  runtime: python3.9
  region: eu-west-3
  apiKeys:
    - ${opt:stage}-${self:service}-key
  apiGateway:
    apiGatewaySourceType: HEADER
  # iamRoleStatements:
  #   - Effect: Allow
  #     Action:
  #     Resource:
  tracing:
    apiGateway: true
    lambda: true

package:
  individually: true
  exclude:
    - "**"
 
custom:
  serviceTier: "freeTier"
  apiKeyOnlyAccess:
    development: true
    production: true
  domainNames: ${file(../serverless-settings/domainNames.yml)}
  certificateNames: ${file(../serverless-settings/certificateNames.yml)}
  customDomain:
    domainName:
    basePath: "users"
    stage: ${opt:stage}
    createRoute53Record: true
    certificateName: ${self:custom.certificateNames.${opt:stage}}
    endpointType: "regional"
  prune:
    automatic: true
    number: 2


functions:
  create-user:
    name: ${self:service}-${opt:stage}-create-user
    description: Responsible for creating new users
    handler: create_user.handler
    runtime: python3.9
    timeout: 10
    package:
      - requirements.txt
      - ../common/exceptions/invalid_parameter.py
      - ../common/exceptions/invalid_configuration.py
      - ../common/utilities/__init__.py
      - ../common/transformers/dictionary_parser.py
      - ../common/api/__init__.py
      - create_user.py
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource:
          Ref: UsersTable
    environments:
      USERS_TABLE:
        Ref: UsersTable
    events:
      - http:
          path: /
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          private: ${self:custom.apiKeyOnlyAccess.${opt:stage}}

resource:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "Users"
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          KeySchema:
            - AttributeName:
              KeyType: HASH
          TimeToLiveSpecification:
            AttributeName: expirationDate
            Enabled: true
  Outputs:
    CreateUserLambdaArn:
      Description: "${self:service} lambda Arn"
      Value:
        "Fn:GetAtt": ["", "Arn"]
      Export:
        Name: "${self:service}:${opt:stage}:CreateUserLambdaArn"